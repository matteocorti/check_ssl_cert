name: Unit tests

on:
  push:
    branches:
      - $default-branch
      - development
      - master
    paths-ignore:
      - varia/**
      - check_ssl_cert.1
      - '**.md'
      - utils/prepare_rpm.sh
      - .github/workflows/publish.yml
  # Run tests for any PRs
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:

  ##############################################################################
  # macOS

  macos:
    name: Running unit tests on ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
    runs-on: ${{ matrix.os }}
    steps:

      - name: Git clone repository
        uses: actions/checkout@v4

      - name: Install shellcheck
        run: brew install shellcheck shunit2 bash-completion nmap

      - name: install cpanm and Date::Parse
        uses: perl-actions/install-with-cpanm@stable
        with:
          install: Date::Parse

      - name: Run the unit tests
        run:  |
          uname -a \
          && make unit_tests \
          && bash -c "source ./check_ssl_cert.completion && complete -p check_ssl_cert" \
          && make dist \
          && sudo make install_bash_completion && bash -c "source ./check_ssl_cert.completion && complete -p check_ssl_cert" \
          && if command -v shellcheck > /dev/null 2>&1  ; then shellcheck ./check_ssl_cert test/*.sh ; fi


  ##############################################################################
  # Linuxes

  linux:
    # The host should always be linux
    runs-on: ubuntu-latest
    name: Running unit tests on ${{ matrix.distro }}
    strategy:
      fail-fast: false
      matrix:
        distro:
          - 'debian:latest'
          - 'ubuntu:latest'
          - 'alpine:latest'
          - 'fedora:latest'
        include:

          - distro: 'debian:latest'
            pre: >-
              apt-get update &&
              DEBIAN_FRONTEND=noninteractive apt-get -y install nmap shellcheck curl sudo perl make bzip2 file openssl dnsutils shunit2 man bc bash-completion iproute2 default-jre

          - distro: 'ubuntu:latest'
            pre: >-
              apt-get update &&
              DEBIAN_FRONTEND=noninteractive apt-get -y install nmap shellcheck curl sudo perl make bzip2 file openssl dnsutils shunit2 man bc net-tools bash-completion default-jre

          - distro: 'alpine:latest'
            pre: >-
              apk update &&
              apk upgrade &&
              apk add -U bash &&
              apk add nmap shellcheck curl sudo perl make wget bzip2 file openssl bind-tools git shunit2 mandoc bc bash-completion openjdk11


          - distro: 'fedora:latest'
            pre: >-
              dnf upgrade -y &&
              dnf install -y hostname &&
              dnf install -y nmap ShellCheck curl sudo perl make bzip2 file openssl bind-utils git shunit2 man bc net-tools bash-completion java-latest-openjdk

    steps:

      - name: Git clone repository
        uses: actions/checkout@v4

      - name: Run the unit tests on ${{ matrix.distro }}
        env:
          PRE: ${{ matrix.pre }}
        run: |
          echo $PRE > ./prep-cmd.sh
          docker run --network host -w /check_ssl_cert -v ${PWD}:/check_ssl_cert ${{ matrix.distro }} \
              /bin/sh -c 'sh ./prep-cmd.sh \
              && curl -L https://cpanmin.us | sudo perl - --sudo App::cpanminus \
              && cpanm --sudo install Date::Parse \
              && uname -a \
              && make unit_tests \
              && bash -c "source ./check_ssl_cert.completion && complete -p check_ssl_cert" \
              && make dist \
              && sudo make install_bash_completion && bash -c "source ./check_ssl_cert.completion && complete -p check_ssl_cert" \
              && if command -v shellcheck > /dev/null 2>&1  ; then shellcheck ./check_ssl_cert test/*.sh ; fi'

  rpm:
    # The host should always be linux
    runs-on: ubuntu-latest
    name: Running RPM tests on ${{ matrix.distro }}
    strategy:
      fail-fast: false
      matrix:
        distro:
          - 'fedora:latest'
        include:
          - distro: 'fedora:latest'
            pre: >-
              dnf install -y hostname &&
              dnf install -y nmap ShellCheck curl sudo perl make bzip2 file openssl bind-utils rpm-build git bash-completion
    steps:

      - name: Git clone repository
        uses: actions/checkout@v4

      - name: Build the RPM on ${{ matrix.distro }}
        env:
          PRE: ${{ matrix.pre }}
        run: |
          echo $PRE > ./prep-cmd.sh
          docker run --network host -w /check_ssl_cert -v ${PWD}:/check_ssl_cert ${{ matrix.distro }} \
              /bin/sh -c 'sh ./prep-cmd.sh \
              && uname -a \
              && make rpm'

  rpm-nocompletion:
    # The host should always be linux
    runs-on: ubuntu-latest
    name: Running RPM tests without bash completion on ${{ matrix.distro }}
    strategy:
      fail-fast: false
      matrix:
        distro:
          - 'fedora:latest'
        include:
          - distro: 'fedora:latest'
            pre: >-
              dnf install -y hostname &&
              dnf install -y nmap ShellCheck curl sudo perl make bzip2 file openssl bind-utils rpm-build git
    steps:

      - name: Git clone repository
        uses: actions/checkout@v4

      - name: Build the RPM on ${{ matrix.distro }}
        env:
          PRE: ${{ matrix.pre }}
        run: |
          echo $PRE > ./prep-cmd.sh
          docker run --network host -w /check_ssl_cert -v ${PWD}:/check_ssl_cert ${{ matrix.distro }} \
              /bin/sh -c 'sh ./prep-cmd.sh \
              && uname -a \
              && make rpm'
